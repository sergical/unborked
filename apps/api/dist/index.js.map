{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,gDAAwB;AACxB,oDAA4B;AAC5B,sDAA8B;AAG9B,gBAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;AAEtB,MAAM,IAAI,GAAG,IAAI,CAAC;AAClB,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,uBAAuB,CAAC;AAEzE,MAAM,WAAW,GAAG;IAClB,MAAM,EAAE,CAAC,YAAY,CAAC;IACtB,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;IACtD,cAAc,EAAE;QACd,cAAc;QACd,eAAe;QACf,WAAW;QACX,cAAc;QACd,SAAS;KACV;IACD,WAAW,EAAE,IAAI;CAClB,CAAC;AAEF,GAAG,CAAC,GAAG,CAAC,IAAA,cAAI,EAAC,WAAW,CAAC,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AAExB,GAAG,CAAC,GAAG,CAAC,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAC1D,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG,qBAAqB,CAAC,CAAC;IAC3D,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,SAAS;AACT,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,gBAAM,CAAC,CAAC;AAExB,GAAG,CAAC,GAAG,CAAC,CAAC,GAAU,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACtE,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;IAEnE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACnB,KAAK,EAAE,kBAAkB;QACzB,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,uBAAuB;KACxF,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,WAAW,GAAG,KAAK,IAAI,EAAE;IAC7B,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QAErC,eAAe;QACf,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,IAAI,CAAC,CAAC;QACtD,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YACpB,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAAC,CAAC;YACjD,OAAO,CAAC,GAAG,CAAC,+BAA+B,YAAY,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,YAAiB,EAAE,CAAC;QAC3B,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,YAAY,CAAC,OAAO,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;QACrF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;AACH,CAAC,CAAC;AAEF,WAAW,EAAE,CAAC","sourcesContent":["import express from 'express';\nimport cors from 'cors';\nimport dotenv from 'dotenv';\nimport routes from './routes';\nimport { Request, Response, NextFunction } from 'express';\n\ndotenv.config();\n\nconst app = express();\n\nconst PORT = 3001;\nconst FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:4173';\n\nconst corsOptions = {\n  origin: [FRONTEND_URL],\n  methods: ['GET', 'POST', 'PATCH', 'DELETE', 'OPTIONS'],\n  allowedHeaders: [\n    'Content-Type',\n    'Authorization',\n    'X-API-Key',\n    'sentry-trace',\n    'baggage'\n  ],\n  credentials: true\n};\n\napp.use(cors(corsOptions));\napp.use(express.json());\n\napp.use((req: Request, res: Response, next: NextFunction) => {\n  console.log(`${req.method} ${req.url} - Request received`);\n  next();\n});\n\n// Routes\napp.use('/api', routes);\n\napp.use((err: Error, req: Request, res: Response, next: NextFunction) => {\n  console.error('Unhandled error occurred:', err.message, err.stack);\n  \n  res.status(500).json({ \n    error: 'Something broke!',\n    message: process.env.NODE_ENV === 'development' ? err.message : 'Internal Server Error'\n  });\n});\n\nconst startServer = async () => {\n  try {\n    console.log('🚀 Starting server...');\n\n    // Start server\n    console.log('About to call app.listen on port', PORT);\n    app.listen(PORT, () => {\n      console.log('✅ Server is running on port', PORT);\n      console.log(`🔗 Allowed frontend origin: ${FRONTEND_URL}`);\n    });\n\n  } catch (startupError: any) {\n    console.error('❌ Failed to start server:', startupError.message, startupError.stack);\n    process.exit(1);\n  }\n};\n\nstartServer();"]}