{"version":3,"file":"sentry.js","sourceRoot":"/","sources":["utils/sentry.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n\nconst SENTRY_WEBHOOK_URL = process.env.SENTRY_WEBHOOK_URL;\nconst WEBHOOK_SECRET = process.env.FEATURE_FLAG_WEBHOOK_SECRET;\n\nif (!WEBHOOK_SECRET) {\n    throw new Error('FATAL ERROR: FEATURE_FLAG_WEBHOOK_SECRET is not defined in the environment.');\n}\n\n// Ensure Sentry webhook URL ends with a trailing slash\nconst ensuredSentryUrl = SENTRY_WEBHOOK_URL && !SENTRY_WEBHOOK_URL.endsWith('/') \n    ? `${SENTRY_WEBHOOK_URL}/` \n    : SENTRY_WEBHOOK_URL;\n\nfunction hmacSha256HexDigest(secret: string, message: string): string {\n    return crypto.createHmac('sha256', secret)\n                 .update(message, 'utf-8')\n                 .digest('hex');\n}\n\nexport async function sendSentryNotification(flagName: string, action: string, userId?: string, userType?: string) {\n    console.log(`\\nüì£ SENDING SENTRY NOTIFICATION üì£`);\n    console.log(`üè∑Ô∏è  Flag: ${flagName}`);\n    console.log(`üîÑ  Action: ${action}`);\n    \n    const now = new Date();\n    const createdAt = now.toISOString().replace(/\\.\\d{3}Z$/, '+00:00');\n    const changeId = Math.floor(Date.now()).toString();\n    \n    console.log(`üîë Using change_id: ${changeId}`);\n\n    const payload = {\n        meta: { version: 1 },\n        data: [{\n            action,\n            change_id: changeId,\n            created_at: createdAt,\n            created_by: {\n                id: userId || 'admin-menu@unborked.app',\n                type: userType || 'email',\n            },\n            flag: flagName,\n        }],\n    };\n    \n    let body = JSON.stringify(payload);\n    body = body.replace(/\"change_id\":\"(\\d+)\"/g, '\"change_id\":$1');\n    \n    const signature = hmacSha256HexDigest(WEBHOOK_SECRET as string, body);\n    \n    try {\n        const sentryResponse = await fetch(ensuredSentryUrl!, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json', \n                'X-Sentry-Signature': signature \n            },\n            body,\n        });\n        \n        if (!sentryResponse.ok) {\n            const errorText = await sentryResponse.text();\n            console.error(`‚ùå Sentry webhook notification failed for ${flagName}: ${sentryResponse.status}`);\n            console.error(`‚ùå Response body: ${errorText}`);\n            return false;\n        }\n        \n        const responseBody = await sentryResponse.text();\n        console.log(`‚úÖ Sentry notification sent successfully for ${flagName} (${action}).`);\n        console.log(`‚úÖ Response body: ${responseBody}`);\n        return true;\n    } catch (error) {\n        console.error(`‚ùå Error sending Sentry notification for ${flagName}:`, error);\n        return false;\n    } finally {\n        console.log(`üì£ SENTRY NOTIFICATION COMPLETE üì£\\n`);\n    }\n} "]}