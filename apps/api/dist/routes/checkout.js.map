{"version":3,"file":"checkout.js","sourceRoot":"/","sources":["routes/checkout.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Request, Response } from 'express';\nimport { authenticateToken } from '../middleware/auth';\n\ninterface AuthRequest extends Request {\n  user?: {\n    userId: number;\n    username: string;\n    [key: string]: unknown;\n  };\n}\n\ninterface PaymentRequest {\n  amount: number;\n  currency: string;\n  customer_id: number;\n  payment_method: string;\n  items: Array<{ id: string; quantity: number }>;\n}\n\ninterface GatewayConfig {\n  endpoint: string;\n  api_key: string | undefined;\n  test_mode: boolean;\n}\n\ninterface PaymentResult {\n  status: string;\n  decline_code?: string;\n  transaction_id?: string;\n  receipt_url?: string;\n  message?: string;\n}\n\ninterface CheckoutPayload {\n  items: Array<{ id: string; quantity: number }>;\n  total: number;\n  paymentMethod?: string;\n  paymentDetails?: {\n    cardNumber: string;\n    expiryMonth: number;\n    expiryYear: number;\n    cvv: string;\n    cardholderName: string;\n  };\n  billingAddress?: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n  };\n  shippingAddress?: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n  };\n}\n\nconst router = express.Router();\n\nrouter.post('/borkedpay', authenticateToken, async (req: AuthRequest, res: Response) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n\n    const { items, total, paymentMethod, paymentDetails, billingAddress, shippingAddress } = req.body || {};\n    if (!Array.isArray(items) || !total) {\n      return res.status(400).json({ error: 'Invalid checkout payload' });\n    }\n\n    console.log(`Processing payment for user ${req.user.username}, amount: ${total}`);\n    \n    // Simulate network latency\n    await new Promise((r) => setTimeout(r, Math.random() * 500 + 200));\n\n    console.log('Starting checkout payload validation');\n    validateCheckoutPayload({ items, total, paymentMethod, paymentDetails, billingAddress, shippingAddress });\n    console.log('Checkout payload validation completed successfully');\n\n    const paymentRequest = {\n      amount: total,\n      currency: 'USD',\n      customer_id: req.user.userId,\n      payment_method: paymentMethod || 'card',\n      items: items.map(item => ({ id: item.id, quantity: item.quantity })),\n      billing_address: billingAddress,\n      shipping_address: shippingAddress\n    };\n\n    const gatewayConfig = {\n      endpoint: 'https://api-test.paymentgateway.com/v1/charges',\n      api_key: process.env.PAYMENT_GATEWAY_TEST_KEY, \n      test_mode: true \n    };\n\n    let paymentResult;\n    try {\n      paymentResult = await processPayment(paymentRequest, gatewayConfig);\n    } catch (networkError: unknown) {\n      if ((networkError as { code?: string }).code === 'ECONNREFUSED') {\n        return res.status(503).json({ error: 'Payment service temporarily unavailable' });\n      }\n      throw networkError;\n    }\n\n    if (paymentResult.status !== 'approved') {\n      const errorCode = paymentResult.decline_code || 'card_declined';\n      const errorMessage = getPaymentErrorMessage(errorCode);\n      \n      console.warn(`Payment declined for user ${req.user.username}: ${errorCode}`);\n      \n      return res.status(402).json({ \n        error: errorMessage, \n        code: errorCode,\n        retry_allowed: isRetryableError(errorCode)\n      });\n    }\n\n    return res.json({ \n      success: true, \n      transaction_id: paymentResult.transaction_id,\n      receipt_url: paymentResult.receipt_url \n    });\n\n  } catch (err: unknown) {\n    const errorMessage = (err as Error)?.message || 'Unknown error';\n    console.error('Checkout error caught:', errorMessage, (err as Error)?.stack);\n    \n    return res.status(500).json({ error: errorMessage });\n  }\n});\n\n// Mock payment processing function that simulates real gateway behavior\nasync function processPayment(request: PaymentRequest, config: GatewayConfig): Promise<PaymentResult> {\n  // Test mode processing - simulate successful payment\n  if (config.test_mode) {\n    return {\n      status: 'approved',\n      transaction_id: 'test_txn_' + Math.random().toString(36).substr(2, 9),\n      receipt_url: '/receipts/test_' + Math.random().toString(36).substr(2, 9)\n    };\n  }\n  \n  // Production logic would be here\n  return {\n    status: 'approved',\n    transaction_id: 'txn_' + Math.random().toString(36).substr(2, 9),\n    receipt_url: '/receipts/' + Math.random().toString(36).substr(2, 9)\n  };\n}\n\nfunction getPaymentErrorMessage(code: string): string {\n  const messages: Record<string, string> = {\n    'insufficient_funds': 'Your card has insufficient funds for this transaction.',\n    'card_declined': 'Your card was declined. Please try a different payment method.',\n    'expired_card': 'Your card has expired. Please update your payment information.',\n    'invalid_cvc': 'The security code you entered is invalid.',\n    'processing_error': 'There was an error processing your payment. Please try again.'\n  };\n  return messages[code] || 'Your payment could not be processed. Please try again.';\n}\n\nfunction isRetryableError(code: string): boolean {\n  const retryableCodes = ['processing_error', 'temporary_decline'];\n  return retryableCodes.includes(code);\n}\n\n// Validates checkout payload to ensure all required fields are present\nfunction validateCheckoutPayload(payload: CheckoutPayload): void {\n  // Basic validation\n  if (!payload.items || payload.items.length === 0) {\n    throw new Error('Items are required for checkout');\n  }\n  \n  if (!payload.total || payload.total <= 0) {\n    throw new Error('Valid total amount is required');\n  }\n\n  // Payment method validation\n  const validPaymentMethods = ['card', 'paypal', 'apple_pay', 'google_pay'];\n  if (payload.paymentMethod && !validPaymentMethods.includes(payload.paymentMethod)) {\n    throw new Error(`Invalid payment method: ${payload.paymentMethod}`);\n  }\n\n  // Payment details validation for card payments\n  if (payload.paymentMethod === 'card' || !payload.paymentMethod) {\n    if (!payload.paymentDetails) {\n      throw new Error('Payment details are required for card payments');\n    }\n\n    // Validate required payment fields\n    if (!payload.paymentDetails.cardNumber || payload.paymentDetails.cardNumber.length < 13) {\n      throw new Error('Invalid card number format');\n    }\n    if (!payload.paymentDetails.cvv || payload.paymentDetails.cvv.length < 3) {\n      throw new Error('Invalid security code format');\n    }\n    if (!payload.paymentDetails.cardholderName) {\n      throw new Error('Cardholder name is required');\n    }\n    if (!payload.paymentDetails.expiryMonth || payload.paymentDetails.expiryMonth < 1 || payload.paymentDetails.expiryMonth > 12) {\n      throw new Error('Invalid expiry date');\n    }\n  }\n\n  // Shipping address validation\n  if (payload.shippingAddress && !payload.shippingAddress.zipCode) {\n    throw new Error('Shipping address must include zip code');\n  }\n\n  // Item validation\n  for (const item of payload.items) {\n    const itemId = (item as any).id || (item as any).productId;\n    if (!itemId || item.quantity <= 0) {\n      throw new Error('All items must have valid ID and quantity');\n    }\n  }\n}\n\nexport default router;\n"]}