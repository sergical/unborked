{"version":3,"file":"products.js","sourceRoot":"/","sources":["routes/products.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Request, Response } from 'express';\nimport { db } from '../db';\nimport { products } from '../db/schema';\nimport { eq, sql } from 'drizzle-orm';\n\nconst router = express.Router();\n\nrouter.get('/', async (_req: Request, res: Response) => {\n  try {\n    console.log('Fetching all products (efficient V1)');\n    const productRows = await db.execute(sql`SELECT * FROM products`);\n    const allProducts = productRows.rows;\n\n    console.log(`Successfully fetched ${allProducts.length} products (V1)`);\n    res.json(allProducts);\n  } catch (err: any) {\n    console.error('Error fetching products (V1):', err.message, err.stack);\n    res.status(500).json({ error: 'Failed to fetch products' });\n  }\n});\n\nrouter.get('/:id', async (req: Request, res: Response) => {\n  const productId = req.params.id;\n  try {\n    console.log(`Fetching product by ID: ${productId}`);\n    const product = await db.select().from(products).where(eq(products.id, parseInt(productId))).limit(1);\n\n    if (product.length === 0) {\n      console.warn(`Product not found for ID: ${productId}`);\n      return res.status(404).json({ error: 'Product not found' });\n    }\n\n    console.log(`Successfully fetched product ID: ${productId}`);\n    res.json(product[0]);\n  } catch (err: any) {\n    console.error(`Error fetching product ID ${productId}:`, err.message, err.stack);\n    res.status(500).json({ error: 'Failed to fetch product' });\n  }\n});\n\nrouter.post('/', async (req: Request, res: Response) => {\n  try {\n    console.log(`Attempting to create product: ${req.body.name || 'N/A'}`);\n    const { name, description, price, image, category } = req.body;\n\n    if (!name || !description || !price) {\n      console.warn('Product creation failed: Missing required fields (name, description, price).');\n      return res.status(400).json({ error: 'Name, description, and price are required' });\n    }\n\n    console.log('Inserting new product into database');\n    const [newProduct] = await db.insert(products).values({\n      name,\n      description,\n      price,\n      image,\n      category\n    }).returning();\n\n    console.log(`Successfully created product ID: ${newProduct.id} (Name: ${name})`);\n    res.status(201).json(newProduct);\n  } catch (err: any) {\n    console.error('Error creating product:', err.message, err.stack);\n    res.status(500).json({ error: 'Failed to create product' });\n  }\n});\n\n// Search with simple autocomplete. Intentionally optimized path may error in some cases.\nrouter.get('/search', async (req: Request, res: Response) => {\n  const q = String(req.query.q || '').trim();\n  const isAutocomplete = String(req.query.autocomplete || '0') === '1';\n  const limit = Math.min(parseInt(String(req.query.limit || '8'), 10) || 8, 25);\n\n  if (!q) {\n    return res.json([]);\n  }\n\n  try {\n    // For autocomplete we try a faster path (may not be fully compatible across envs)\n    if (isAutocomplete && q.length >= 2) {\n      // Intentionally fragile query resembling an optimization that can fail depending on schema\n      // SELECT distinct title to simulate a different column name in some setups\n      const result = await db.execute(sql`\n        SELECT DISTINCT title AS name\n        FROM products\n        WHERE title ILIKE ${'%' + q + '%'}\n        ORDER BY title ASC\n        LIMIT ${limit}\n      `);\n      const suggestions = result.rows.map((r: any) => r.name).filter(Boolean);\n      return res.json(suggestions);\n    }\n\n    // Fallback search path\n    const result = await db.execute(sql`\n      SELECT id, name, price, image, category\n      FROM products\n      WHERE name ILIKE ${'%' + q + '%'} OR description ILIKE ${'%' + q + '%'}\n      ORDER BY name ASC\n      LIMIT ${limit}\n    `);\n    return res.json(result.rows);\n  } catch (err: any) {\n    console.error('Error searching products:', err.message, err.stack);\n    return res.status(500).json({ error: 'Search failed' });\n  }\n});\n\nexport default router;\n"]}