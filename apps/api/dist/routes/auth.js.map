{"version":3,"file":"auth.js","sourceRoot":"/","sources":["routes/auth.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Request, Response } from 'express';\nimport { db } from '../db';\nimport { users } from '../db/schema';\nimport { eq } from 'drizzle-orm';\nimport jwt from 'jsonwebtoken';\n\nconst router = express.Router();\n\n// Register a new user\nrouter.post('/register', async (req: Request, res: Response) => {\n  try {\n    console.log(`Registration attempt for username: ${req.body.username}`);\n    const { username, password } = req.body;\n\n    if (!username || !password) {\n      console.warn('Registration failed: Username or password missing.');\n      return res.status(400).json({ error: 'Username and password are required' });\n    }\n\n    // Check if user already exists\n    console.log(`Checking existence for username: ${username}`);\n    const existingUser = await db.select().from(users).where(eq(users.username, username)).limit(1);\n\n    if (existingUser.length > 0) {\n      console.warn(`Registration failed: Username already exists: ${username}`);\n      return res.status(400).json({ error: 'Username already exists' });\n    }\n\n    // Create new user\n    console.log(`Creating new user: ${username}`);\n    const [newUser] = await db.insert(users).values({\n      username,\n      password, // In a real app, this would be hashed\n    }).returning();\n\n    console.log(`User registered successfully: ${username} (ID: ${newUser.id})`);\n\n    res.status(201).json({\n      message: 'User registered successfully',\n      userId: newUser.id\n    });\n  } catch (err: any) {\n    console.error(`Registration error for ${req.body.username}:`, err.message, err.stack);\n    res.status(500).json({ error: 'Failed to register user' });\n  }\n});\n\n// Login\nrouter.post('/login', async (req: Request, res: Response) => {\n  try {\n    console.log(`Login attempt for username: ${req.body.username}`);\n    const { username, password } = req.body;\n\n    if (!username || !password) {\n      console.warn('Login failed: Username or password missing.');\n      return res.status(400).json({ error: 'Username and password are required' });\n    }\n\n    // Find user\n    console.log(`Attempting to find user: ${username}`);\n    const user = await db.select().from(users).where(eq(users.username, username)).limit(1);\n\n    if (user.length === 0 || user[0].password !== password) {\n      console.warn(`Login failed: Invalid credentials for username: ${username}`);\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Generate JWT token\n    console.log(`Generating JWT for user ID: ${user[0].username}`);\n    const token = jwt.sign(\n      {\n        userId: user[0].id,\n        username: user[0].username,\n      },\n      process.env.JWT_SECRET || 'default_secret',\n      { expiresIn: '24h' }\n    );\n\n    console.log(`User logged in successfully: ${username} (ID: ${user[0].username})`);\n\n    res.json({\n      token,\n      user: {\n        id: user[0].id,\n        username: user[0].username,\n      },\n    });\n  } catch (err: any) {\n    console.error(`Login error for ${req.body.username}:`, err.message, err.stack);\n    res.status(500).json({ error: 'Failed to login' });\n  }\n});\n\nexport default router;\n"]}