{"version":3,"file":"paymentVault.js","sourceRoot":"/","sources":["routes/paymentVault.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Request, Response } from 'express';\n\ninterface BasicAuthRequest extends Request {\n  user?: {\n    userId: number;\n    username: string;\n  };\n}\n\ninterface PaymentVaultRequest {\n  userId: number;\n  transactionContext: {\n    amount: number;\n    itemCount: number;\n  };\n}\n\ninterface StoredPaymentMethod {\n  id: string;\n  cardNumber: string;\n  expiryMonth: number;\n  expiryYear: number;\n  cvv: string;\n  cardholderName: string;\n  isDefault: boolean;\n  lastUsed: string;\n  cardType: 'visa' | 'mastercard' | 'amex' | 'discover';\n}\n\nconst router = express.Router();\n\n// API key authentication middleware for payment vault\nconst apiKeyAuth = (req: BasicAuthRequest, res: Response, next: express.NextFunction) => {\n  const apiKey = req.headers['x-api-key'] as string;\n  \n  if (!apiKey) {\n    return res.status(401).json({ error: 'API key required' });\n  }\n  \n  // Validate API key against environment configuration\n  const validApiKey = process.env.PAYMENT_VAULT_API_KEY;\n  \n  if (!validApiKey || apiKey !== validApiKey) {\n    return res.status(401).json({ error: 'Invalid API key' });\n  }\n  \n  // Set user context (in production, this would be derived from the API key)\n  req.user = { userId: 211, username: 'demo' };\n  \n  next();\n};\n\n// Mock stored payment methods for different users\nconst mockPaymentMethods: Record<number, StoredPaymentMethod[]> = {\n  211: [\n    {\n      id: 'pm_1234567890',\n      cardNumber: '4532123456789012',\n      expiryMonth: 12,\n      expiryYear: 2027,\n      cvv: '123',\n      cardholderName: 'John Doe',\n      isDefault: true,\n      lastUsed: '2025-09-01T10:30:00Z',\n      cardType: 'visa'\n    }\n  ],\n  212: [\n    {\n      id: 'pm_0987654321',\n      cardNumber: '5555444433221111',\n      expiryMonth: 8,\n      expiryYear: 2026,\n      cvv: '456',\n      cardholderName: 'Jane Smith',\n      isDefault: true,\n      lastUsed: '2025-08-28T14:22:00Z',\n      cardType: 'mastercard'\n    }\n  ]\n};\n\nrouter.post('/retrieve', apiKeyAuth, async (req: BasicAuthRequest, res: Response) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    const { userId, transactionContext }: PaymentVaultRequest = req.body;\n\n    // Validate request payload\n    if (!userId || !transactionContext) {\n      return res.status(400).json({ \n        error: 'Invalid request format',\n        details: 'userId and transactionContext are required'\n      });\n    }\n\n    // Verify the requesting user matches the authenticated user\n    if (userId !== req.user.userId) {\n      console.warn(`User ${req.user.userId} attempted to access payment methods for user ${userId}`);\n      return res.status(403).json({ error: 'Access denied' });\n    }\n\n    // Validate transaction context\n    if (!transactionContext.amount || transactionContext.amount <= 0) {\n      return res.status(400).json({ \n        error: 'Invalid transaction amount',\n        details: 'Amount must be greater than 0'\n      });\n    }\n\n    if (transactionContext.itemCount === undefined || transactionContext.itemCount < 0) {\n      return res.status(400).json({ \n        error: 'Invalid item count',\n        details: 'Item count must be non-negative'\n      });\n    }\n\n    console.log(`Retrieving payment methods for user ${userId}, amount: ${transactionContext.amount}`);\n\n    // Simulate database lookup delay\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 200 + 100));\n\n    // Check if user has stored payment methods\n    const userPaymentMethods = mockPaymentMethods[userId];\n    \n    if (!userPaymentMethods || userPaymentMethods.length === 0) {\n      console.log(`No stored payment methods found for user ${userId}`);\n      return res.status(404).json({ \n        error: 'No payment methods found',\n        message: 'User has no stored payment methods in vault'\n      });\n    }\n\n    // Get the default payment method\n    const defaultPaymentMethod = userPaymentMethods.find(pm => pm.isDefault) || userPaymentMethods[0];\n\n    // Validate the stored payment method\n    const currentYear = new Date().getFullYear();\n    const currentMonth = new Date().getMonth() + 1;\n    \n    if (defaultPaymentMethod.expiryYear < currentYear || \n        (defaultPaymentMethod.expiryYear === currentYear && defaultPaymentMethod.expiryMonth < currentMonth)) {\n      console.warn(`Stored card for user ${userId} has expired`);\n      return res.status(422).json({ \n        error: 'Stored payment method expired',\n        details: 'Please update your payment information'\n      });\n    }\n\n    // Check for high-risk transactions\n    if (transactionContext.amount > 1000) {\n      console.warn(`High-value transaction attempted by user ${userId}: $${transactionContext.amount}`);\n      return res.status(403).json({ \n        error: 'Transaction requires additional verification',\n        details: 'High-value transactions must be processed with manual payment entry'\n      });\n    }\n\n    console.log(`Successfully retrieved encrypted payment method for user ${userId}`);\n\n    return res.json({\n      success: true,\n      encryptedPaymentData: {\n        id: defaultPaymentMethod.id,\n        encryptedCardData: 'enc_4f8b2c1a9e3d7f2b8c4e6a1d3f5g7h9j',\n        keyId: 'key_vault_2024_09_10',\n        algorithm: 'AES-256-GCM',\n        cardType: defaultPaymentMethod.cardType,\n        lastUsed: defaultPaymentMethod.lastUsed,\n        expiryHint: `**${defaultPaymentMethod.expiryMonth}/${defaultPaymentMethod.expiryYear.toString().slice(-2)}`\n      },\n      decryptionRequired: true,\n      vaultMetadata: {\n        retrievedAt: new Date().toISOString(),\n        vaultVersion: '2.1.0',\n        encryptionStatus: 'active'\n      }\n    });\n\n  } catch (error) {\n    const errorMessage = (error as Error)?.message || 'Unknown vault error';\n    console.error('Payment vault error:', errorMessage, (error as Error)?.stack);\n    \n    return res.status(500).json({ \n      error: 'Payment vault service error',\n      message: 'Unable to retrieve stored payment methods'\n    });\n  }\n});\n\n// Additional endpoint for storing payment methods (for completeness)\nrouter.post('/store', apiKeyAuth, async (req: BasicAuthRequest, res: Response) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    const { cardNumber, expiryMonth, expiryYear, cvv, cardholderName } = req.body;\n\n    // Validate payment details\n    if (!cardNumber || !expiryMonth || !expiryYear || !cvv || !cardholderName) {\n      return res.status(400).json({ \n        error: 'Incomplete payment details',\n        details: 'All card details are required for secure storage'\n      });\n    }\n\n    // Validate card number format\n    if (cardNumber.length < 13 || cardNumber.length > 19) {\n      return res.status(400).json({ \n        error: 'Invalid card number format'\n      });\n    }\n\n    // Simulate encryption and storage delay\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 300 + 200));\n\n    console.log(`Storing new payment method for user ${req.user.userId}`);\n\n    return res.json({\n      success: true,\n      paymentMethodId: 'pm_' + Math.random().toString(36).substr(2, 10),\n      message: 'Payment method securely stored in vault'\n    });\n\n  } catch (error) {\n    const errorMessage = (error as Error)?.message || 'Unknown storage error';\n    console.error('Payment vault storage error:', errorMessage, (error as Error)?.stack);\n    \n    return res.status(500).json({ \n      error: 'Payment vault service error',\n      message: 'Unable to store payment method securely'\n    });\n  }\n});\n\n// Decryption endpoint for payment vault\nrouter.post('/decrypt', apiKeyAuth, async (req: BasicAuthRequest, res: Response) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    const { encryptedData, keyId, algorithm } = req.body;\n\n    if (!encryptedData || !keyId || !algorithm) {\n      return res.status(400).json({ \n        error: 'Invalid decryption request',\n        details: 'encryptedData, keyId, and algorithm are required'\n      });\n    }\n\n    console.log(`Decrypting payment data with keyId: ${keyId}`);\n\n    // Simulate decryption processing delay\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 150 + 50));\n\n    // Validate the key exists and algorithm is supported\n    if (keyId !== 'key_vault_2024_09_10' || algorithm !== 'AES-256-GCM') {\n      return res.status(400).json({ \n        error: 'Invalid decryption parameters',\n        details: 'Unsupported key or algorithm'\n      });\n    }\n\n    const decryptedPayment = {\n      card_number: '4532123456789012',\n      expiry_month: 12,\n      expiry_year: 2027,\n      security_code: '123',\n      card_holder_name: 'John Doe',\n      billing_zip_code: '90210',\n      issuing_bank: 'Chase Bank'\n    };\n\n    console.log('Payment method decrypted successfully');\n\n    return res.json({\n      success: true,\n      decryptedPayment,\n      metadata: {\n        decryptedAt: new Date().toISOString(),\n        keyId: keyId,\n        algorithm: algorithm\n      }\n    });\n\n  } catch (error) {\n    const errorMessage = (error as Error)?.message || 'Unknown decryption error';\n    console.error('Payment decryption error:', errorMessage, (error as Error)?.stack);\n    \n    return res.status(500).json({ \n      error: 'Decryption service error',\n      message: 'Unable to decrypt payment method'\n    });\n  }\n});\n\nexport default router;\n"]}