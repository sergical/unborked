{"version":3,"file":"purchases.js","sourceRoot":"/","sources":["routes/purchases.ts"],"names":[],"mappings":";;;;;AAAA,sDAAqD;AACrD,8BAA2B;AAC3B,yCAAyC;AACzC,6CAAiC;AACjC,6CAAuD;AAWvD,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC,wBAAwB;AACxB,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,wBAAiB,EAAE,KAAK,EAAE,GAAgB,EAAE,GAAa,EAAE,EAAE;IAC5E,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,+CAA+C,GAAG,CAAC,IAAI,EAAE,QAAQ,IAAI,KAAK,EAAE,CAAC,CAAC;QAC1F,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAElC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YACd,OAAO,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;YAClE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,CAAC,CAAC;QACnE,CAAC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAC/B,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,oCAAoC,MAAM,EAAE,CAAC,CAAC;QAE1D,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC;YACrB,OAAO,CAAC,IAAI,CAAC,qCAAqC,MAAM,2CAA2C,CAAC,CAAC;YACrG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,8BAA8B,EAAE,CAAC,CAAC;QACzE,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,+BAA+B,MAAM,gBAAgB,CAAC,CAAC;QACnE,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,OAAE,CAAC,MAAM,CAAC,kBAAS,CAAC,CAAC,MAAM,CAAC;YACnD,MAAM;YACN,KAAK;YACL,KAAK;SACN,CAAC,CAAC,SAAS,EAAE,CAAC;QAEf,OAAO,CAAC,GAAG,CAAC,qCAAqC,QAAQ,CAAC,EAAE,iBAAiB,MAAM,EAAE,CAAC,CAAC;QACvF,OAAO,CAAC,GAAG,CAAC,GAAG,QAAQ,iBAAiB,MAAM,2BAA2B,KAAK,CAAC,MAAM,cAAc,KAAK,EAAE,CAAC,CAAC;QAE5G,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,qBAAqB;YAC9B,QAAQ;SACT,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,OAAO,CAAC,KAAK,CAAC,oCAAoC,GAAG,CAAC,IAAI,EAAE,QAAQ,IAAI,KAAK,GAAG,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;QAC1G,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,4BAA4B,EAAE,CAAC,CAAC;IAChE,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,4BAA4B;AAC5B,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,wBAAiB,EAAE,KAAK,EAAE,GAAgB,EAAE,GAAa,EAAE,EAAE;IAC3E,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,sDAAsD,GAAG,CAAC,IAAI,EAAE,QAAQ,IAAI,KAAK,EAAE,CAAC,CAAC;QAEjG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YACd,OAAO,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;YACvE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,CAAC,CAAC;QACnE,CAAC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,4CAA4C,GAAG,CAAC,IAAI,EAAE,QAAQ,IAAI,KAAK,EAAE,CAAC,CAAC;QAEvF,OAAO,CAAC,GAAG,CAAC,sCAAsC,MAAM,gBAAgB,CAAC,CAAC;QAC1E,MAAM,aAAa,GAAG,MAAM,OAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,kBAAS,CAAC,CAAC,KAAK,CAAC,IAAA,gBAAE,EAAC,kBAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QAE5F,OAAO,CAAC,GAAG,CAAC,wBAAwB,aAAa,CAAC,MAAM,6BAA6B,MAAM,EAAE,CAAC,CAAC;QAE/F,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC1B,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,OAAO,CAAC,KAAK,CAAC,4CAA4C,GAAG,CAAC,IAAI,EAAE,QAAQ,IAAI,KAAK,GAAG,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;QAClH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,kCAAkC,EAAE,CAAC,CAAC;IACtE,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import express, { Request, Response } from 'express';\nimport { db } from '../db';\nimport { purchases } from '../db/schema';\nimport { eq } from 'drizzle-orm';\nimport { authenticateToken } from '../middleware/auth';\n\n// Define interface for authorized request with user\ninterface AuthRequest extends Request {\n  user?: {\n    userId: number;\n    username: string;\n    [key: string]: any;\n  };\n}\n\nconst router = express.Router();\n\n// Create a new purchase\nrouter.post('/', authenticateToken, async (req: AuthRequest, res: Response) => {\n  try {\n    console.log(`Attempting to create purchase for username: ${req.user?.username || 'N/A'}`);\n    const { items, total } = req.body;\n    \n    if (!req.user) {\n      console.warn('Purchase creation failed: User not authenticated.');\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n    \n    const userId = req.user.userId;\n    const username = req.user.username;\n    console.log(`User authenticated for purchase: ${userId}`);\n\n    if (!items || !total) {\n      console.warn(`Purchase creation failed for user ${userId}: Missing required fields (items, total).`);\n      return res.status(400).json({ error: 'Items and total are required' });\n    }\n\n    console.log(`Inserting purchase for user ${userId} into database`);\n    const [purchase] = await db.insert(purchases).values({\n      userId,\n      items,\n      total\n    }).returning();\n\n    console.log(`Successfully created purchase ID: ${purchase.id} for user ID: ${userId}`);\n    console.log(`${username} with user ID ${userId} successfully purchased ${items.length} items for ${total}`);\n    \n    res.status(201).json({\n      message: 'Purchase successful',\n      purchase\n    });\n  } catch (err: any) {\n    console.error(`Error creating purchase for user ${req.user?.username || 'N/A'}:`, err.message, err.stack);\n    res.status(500).json({ error: 'Failed to process purchase' });\n  }\n});\n\n// Get user purchase history\nrouter.get('/', authenticateToken, async (req: AuthRequest, res: Response) => {\n  try {\n    console.log(`Attempting to fetch purchase history for username: ${req.user?.username || 'N/A'}`);\n    \n    if (!req.user) {\n      console.warn('Purchase history fetch failed: User not authenticated.');\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n    \n    const userId = req.user.userId;\n    console.log(`User authenticated for purchase history: ${req.user?.username || 'N/A'}`);\n\n    console.log(`Fetching purchase history for user ${userId} from database`);\n    const userPurchases = await db.select().from(purchases).where(eq(purchases.userId, userId));\n    \n    console.log(`Successfully fetched ${userPurchases.length} purchase(s) for user ID: ${userId}`);\n\n    res.json(userPurchases);\n  } catch (err: any) {\n    console.error(`Error fetching purchase history for user ${req.user?.username || 'N/A'}:`, err.message, err.stack);\n    res.status(500).json({ error: 'Failed to fetch purchase history' });\n  }\n});\n\nexport default router;\n"]}