{"version":3,"file":"sale.js","sourceRoot":"/","sources":["routes/sale.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Request, Response } from 'express';\nimport { db } from '../db';\nimport { products, salePrices, productMetadata, saleCategories } from '../db/schema';\nimport { eq } from 'drizzle-orm';\n\nconst router = express.Router();\n\n// Poorly designed endpoint - this looks innocent but will cause N+1 queries\nrouter.get('/', async (_req: Request, res: Response) => {\n  try {\n    console.log('Fetching sale products');\n    \n    // Step 1: Get all products (looks reasonable)\n    console.log('Fetching all products');\n    const allProducts = await db.select().from(products);\n\n    // Step 2: For EACH product, query sale prices individually (N+1 problem!)\n    const saleProducts: any[] = [];\n\n    console.log(`Checking sale prices for ${allProducts.length} products`);\n\n    // Load sale data for each product\n    for (const product of allProducts) {\n      // Individual query per product - this is the killer\n      const salePrice = await db\n        .select()\n        .from(salePrices)\n        .where(eq(salePrices.productId, product.id))\n        .limit(1);\n\n      if (salePrice.length > 0) {\n        // Another individual query for metadata (double N+1!)\n        const metadata = await db\n          .select()\n          .from(productMetadata)\n          .where(eq(productMetadata.productId, product.id))\n          .limit(1);\n\n        // Yet another query to match category by string (triple whammy!)\n        let categoryInfo = null;\n        if (metadata.length > 0 && metadata[0].saleCategory) {\n          const categoryResult = await db\n            .select()\n            .from(saleCategories)\n            .where(eq(saleCategories.name, metadata[0].saleCategory))\n            .limit(1);\n\n          if (categoryResult.length > 0) {\n            categoryInfo = categoryResult[0];\n          }\n        }\n\n        saleProducts.push({\n          ...product,\n          originalPrice: product.price,\n          salePrice: salePrice[0].salePrice,\n          discount: metadata.length > 0 ? metadata[0].discount : null,\n          saleCategory: metadata.length > 0 ? metadata[0].saleCategory : null,\n          featured: metadata.length > 0 ? metadata[0].featured : false,\n          priority: metadata.length > 0 ? metadata[0].priority : 0,\n          categoryDescription: categoryInfo ? categoryInfo.description : null\n        });\n      }\n    }\n\n    // Sort by priority (no index on priority field, so this is slow)\n    saleProducts.sort((a, b) => (b.priority || 0) - (a.priority || 0));\n\n    console.log(`Successfully fetched ${saleProducts.length} sale products after ${allProducts.length * 3} queries`);\n\n    res.json(saleProducts);\n  } catch (err: any) {\n    console.error('Error fetching sale products:', err.message, err.stack);\n    res.status(500).json({ error: 'Failed to fetch sale products' });\n  }\n});\n\n// Shop endpoint - slightly better but still inefficient\nrouter.get('/shop', async (_req: Request, res: Response) => {\n  try {\n    console.log('Fetching shop products');\n    \n    // Get all products with a single query (this part is fine)\n    const allProducts = await db.select().from(products);\n\n    console.log(`Successfully fetched ${allProducts.length} shop products`);\n\n    res.json(allProducts);\n  } catch (err: any) {\n    console.error('Error fetching shop products:', err.message, err.stack);\n    res.status(500).json({ error: 'Failed to fetch shop products' });\n  }\n});\n\nexport default router;\n"]}